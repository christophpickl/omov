package holmes.flash {import flash.display.MovieClip;import flash.events.MouseEvent;import flash.events.TextEvent;import mx.flash.UIMovieClip;[Event(name="muscleClicked", type="flash.events.TextEvent")]public class HumanClass extends UIMovieClip {	public static const MUSCLE_IDS: Array = new Array("head", "body", "legs");	/** from "human_head_mc" to "head" */	private var mcId2muscleNameMap: Array = new Array();	private var mcArray: Array = new Array();	private var _editable: Boolean = false;	public function HumanClass() {		super();		trace("HumanClass() constructor invoked");		for each(var muscleName: String in MUSCLE_IDS) {			var mcName: String = "human_" + muscleName + "_mc";			this.mcId2muscleNameMap[mcName] = muscleName;			var muscle_mc: MovieClip = this[mcName] as MovieClip;			mcArray.push(muscle_mc);		}	}	public function get editable(): Boolean {		return _editable;	}	public function set editable(value: Boolean): void {		if(_editable == value) {			return;		}		trace("HumanClass.editable set to = " + value);		if(value == true) {			for each(var mc1: MovieClip in this.mcArray) {				mc1.buttonMode = true;				mc1.addEventListener(MouseEvent.CLICK, this.onMuscleClick);			}		} else {			for each(var mc: MovieClip in this.mcArray) {				mc.buttonMode = true;				mc.removeEventListener(MouseEvent.CLICK, this.onMuscleClick);			}		}		_editable = value;	}	/**	 * @param muscleName must be one of HUMAN_ARTS	 * @param weight from 0 to 100	 */	public function setMuscleRelation(muscleId: String, weight: uint): void {		trace("HumanClass.setMuscleRelation(muscleId="+muscleId+"; weight="+weight+")");		const targetMuscleMc: MovieClip = this["human_" + muscleId + "_mc"] as MovieClip;		if(targetMuscleMc == null) {			throw new Error("Invalid muscle name [" + muscleId + "]!");		}		trace("targetMuscleMc.filling_mc.alpha = " + targetMuscleMc.filling_mc.alpha);		trace("new alpha: " + (weight / 100));		targetMuscleMc.filling_mc.alpha = weight / 100;		trace("targetMuscleMc.filling_mc.alpha = " + targetMuscleMc.filling_mc.alpha);		/*		const fillContainer: Object = targetMuscleMc.filling_mc; // create shortcut		const newColorTransform: ColorTransform = fillContainer.transform.colorTransform; // copy color		const targetMultiplier: Number = (weight == 100 ? 0.0 : 1.0)		// col.redMultiplier ... stays 1.0		newColorTransform.greenMultiplier = targetMultiplier;		newColorTransform.blueMultiplier = targetMultiplier;		fillContainer.transform.colorTransform = newColorTransform; // apply color transformation		*/	}	protected final function onMuscleClick(e: MouseEvent): void {		var muscle_mc: MovieClip = e.currentTarget as MovieClip;		trace("onMuscleClick(); muscle_mc.name=[" + muscle_mc.name + "]");		const newEvent: TextEvent = new TextEvent("muscleClicked")		newEvent.text = this.mcId2muscleNameMap[muscle_mc.name];		if(newEvent.text == null) {			throw new Error("Could not find muscle name mapping for mc name ["+muscle_mc.name+"]!");		}		this.dispatchEvent(newEvent);	}}}